import numpy as np
from numpy.polynomial.polynomial import Polynomial
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

# 测量数据
data = np.array([
    [19.21819, 21.58691, 0],
    [-21.2339, -19.6216, 0],
    [-0.47215, 0.589891, 34.35],
    [21.6077, 8.653093, 5.4],
    [-8.73915, 7.097205, 22.84],
    [6.559765, -3.57744, 37.69],
    [-11.5002, -12.7829, 11.27],
    [-4.3501, 6.611811, 30.82],
    [15.45285, 9.80828, 21.38],
    [-3.78404, 21.78005, 5.6],
    [-2.15246, -9.98438, 18.13],
    [1.418993, -0.90659, 34.4],
    [-20.82, -6.61831, 5.94],
    [-7.93802, 23.27108, 2.37],
    [-13.725, 17.79296, 5.12],
    [-4.00102, -28.0399, 0],
    [20.1341, 1.048177, 11.87],
    [-16.4181, -22.4168, 0.04],
    [-9.5114, 18.5563, 7.22],
    [7.745343, -13.5499, 27.54],
    [-22.8704, -9.39998, 2.21],
    [-4.36131, -1.14529, 29.62],
    [-6.47031, 18.0221, 10.12],
    [-5.35943, 17.82977, 12.03],
    [28.25521, -5.83685, 0],
    [14.14075, 25.56649, 0],
    [-6.48239, -5.6844, 20.53],
    [17.34267, 7.515943, 19.05],
    [-7.66532, 14.2378, 15.95],
    [24.33702, -3.65558, 2.34],
    [8.483218, -12.8935, 29.29],
    [-11.2042, -21.7811, 2.49],
    [-5.11276, -7.42102, 19.73],
    [3.883128, -11.4583, 26.9],
    [-12.7921, 20.25601, 3.16],
    [3.652731, -5.76455, 34.1],
    [-2.99813, 11.25663, 28.39],
    [21.66803, -12.7424, 1.74],
    [-22.7664, -14.4342, 0.27],
    [19.80918, -10.6515, 5.09],
    [1.984571, 22.32959, 5.79],
    [3.825095, -2.26052, 33.71],
    [-27.6377, 7.547372, 0],
    [-2.24945, 26.82098, 0.29],
    [-10.7347, 25.54894, 0.05],
    [-23.0635, -0.99808, 4.3],
    [-0.22601, 0.598279, 34.5],
    [-14.9997, 9.705948, 10.61],
    [0.468113, 6.843338, 34.66],
    [16.33429, 24.50226, 0],
    [22.72224, 0.221199, 4.87],
    [5.884405, 14.73454, 25.91],
    [-5.55133, -1.87797, 27.21],
    [-5.27043, -4.71551, 24.11],
    [3.517867, -28.3587, 0],
    [-9.42522, -24.7311, 0.54],
    [-16.776, 8.953109, 9.39],
    [-13.8288, 25.91039, 0],
    [25.30418, -7.20251, 0.65],
    [11.04398, 7.587306, 30.63],
    [-13.4322, 22.74934, 0.58],
    [-1.90165, -5.91565, 26.58],
    [-6.97719, -8.37994, 16.08],
    [-21.1374, 17.75717, 0.07],
    [-7.82567, -10.7897, 14.38],
    [-1.50177, 21.34961, 7.12],
    [2.392183, 2.584001, 35.94],
    [27.13965, -7.43802, 0.01],
    [28.71756, 6.36861, 0],
    [-5.64621, -12.8103, 13.92],
    [-8.15818, 12.20725, 18.5],
    [3.739896, 1.248562, 35.73],
    [3.65472, -26.6304, 0.31],
    [-7.75461, -20.1054, 6.33],
    [17.78406, 4.44273, 19.33],
    [13.97186, 13.59643, 18.66],
    [26.70162, -9.8285, 0],
    [13.92196, -24.4845, 0.01],
    [22.49706, -7.65342, 3.41],
    [9.982208, 2.730809, 33.03],
    [-16.2445, 0.791485, 12.13],
    [17.6934, 19.72679, 0.52],
    [1.450831, -13.3622, 14.4],
    [9.263764, 22.70722, 2.59],
    [3.291101, 4.51463, 35.99],
    [-2.47501, -2.57723, 30.52],
    [7.526845, 1.474087, 34.65],
    [-9.14647, 5.724049, 22.57],
    [0.024551, 13.46354, 27.68],
    [1.07019, -24.4788, 2.48],
    [14.80478, -19.0959, 2.9],
    [16.67426, -17.0043, 3.34],
    [-7.75284, 4.948664, 25.85],
    [-4.90592, -6.41968, 21.86],
    [-18.088, -7.20454, 8.88],
    [0.518428, -5.17155, 29.59],
    [17.53749, 11.04627, 14.57],
    [-0.38725, 6.231553, 34.51],
    [7.582768, 13.27712, 27.54],
    [8.213603, -6.31846, 41.94]
])

# 拆分数据为x, y, z
X = data[:, :2]  # x和y
z = data[:, 2]   # f(x, y)

# 构建二次多项式特征
poly = PolynomialFeatures(degree=2, include_bias=False)
X_poly = poly.fit_transform(X)

# 使用线性回归进行拟合
model = LinearRegression().fit(X_poly, z)

# 输出拟合的系数
coefs = model.coef_
intercept = model.intercept_

# 构建函数表达式
f_expression = f"f(x, y) = {intercept:.4f} + {coefs[0]:.4f}*x + {coefs[1]:.4f}*y + " \
               f"{coefs[2]:.4f}*x^2 + {coefs[3]:.4f}*xy + {coefs[4]:.4f}*y^2"

print(f_expression)
